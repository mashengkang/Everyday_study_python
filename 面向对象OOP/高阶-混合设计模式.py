# coding:utf-8

'''
Mixin 混合设计模式

继承需要有个必要的前提,继承应该是一个 'is -a' 的关系
例如:
    苹果可以去继承水果,因为苹果就是水果
    苹果不能继承午饭,因为午饭可以不出苹果

交通工具:
    汽车,飞机,直升机
    定义交通工具时,汽车不会飞,但是后面两个会飞,所以飞行这功能不合适
怎么办?
    单独定义交通工具类,和飞行器 这两个父类,这样分情况就去继承功能,但这样,违背了 is-a'的原则

'''

# 交通工具
class vehicle():
    # 运输货
    def huo(self):
        print('运货')
    # 乘客
    def ren(self):
        print('拉人')


class FlyingMixin():
    def fly(self):
        print('飞起来了')

# 定义汽车
class Cars(vehicle):
    pass

# 定义飞机
class Airpalne(vehicle, FlyingMixin):
    pass

# 定义直升机
class Helicopter(vehicle, FlyingMixin):
    pass

# 此时去定义一个飞行器的类,让需要飞行的交通工具,直接继承这个类,可以解决这个问题
# 但是:1.出现类多继承,违背了'is-a' 2.飞行器这个类很容易被误解
# 解决方案也是使用多继承,但是给飞行器这个类,定义称为一个Mixin 混合类
# 此时就是等于把飞行器这个类,作为了一个可扩展的功能,来扩展其他类

'''
在上面的代码中,虽然直升机和飞机都使用了多继承,也就是继承了FlyingMixin
但是由于 FlyingMixin 类加了 Mixin这名,  就告诉后面阅读代码的人,这个类时要给Mixin类
Mixin表示混入(mix-in)
    mixin 必须表示一种功能,而不是一个对象
    Mixin 的功能必须单一,如果有多个功能,那就多定义Mixin类
    Mixin这个类通常不单独使用,而是混合到其他类中,去增加功能的
    Mixin类不依赖子类的实现,即使子类没有继承这个Mixin,子类也能正常运行,可能就是缺少了一些功能
使用Mixin混入类的好处?
    1.Mixin 这个混入类的设计模式,在不对类的内容修改的前提下,扩展了类的功能
    2.Mixin 混入类为了提高代码的重用性,使得代码结构更加简单清晰
    3.可以根据开发需要任意调整功能,(创建新的Mixin混入类
    4.避免设计多层次的复杂的继承关系
'''